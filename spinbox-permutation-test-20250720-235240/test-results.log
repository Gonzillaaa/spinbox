[Python Only] /Users/gonzalo/code/spinbox/bin/spinbox create 01-python-only --python
[0;34m[i] Creating project: 01-python-only[0m
[0;34m[i] Location: ./01-python-only[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 01-python-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./01-python-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 01-python-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 01-python-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python Only
---
[Node Only] /Users/gonzalo/code/spinbox/bin/spinbox create 02-node-only --node
[0;34m[i] Creating project: 02-node-only[0m
[0;34m[i] Location: ./02-node-only[0m
[0;34m[i] Components: node[0m
[0;34m[i] Version Configuration:[0m
  Node.js: 20 (from config file)
[0;32m[+] Creating project 02-node-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Node.js project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./02-node-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 02-node-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 02-node-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Node Only
---
[FastAPI Only] /Users/gonzalo/code/spinbox/bin/spinbox create 03-fastapi-only --fastapi
[0;34m[i] Creating project: 03-fastapi-only[0m
[0;34m[i] Location: ./03-fastapi-only[0m
[0;34m[i] Components: fastapi[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 03-fastapi-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./03-fastapi-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 03-fastapi-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 03-fastapi-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: FastAPI Only
---
[NextJS Only] /Users/gonzalo/code/spinbox/bin/spinbox create 04-nextjs-only --nextjs
[0;34m[i] Creating project: 04-nextjs-only[0m
[0;34m[i] Location: ./04-nextjs-only[0m
[0;34m[i] Components: nextjs[0m
[0;34m[i] Version Configuration:[0m
[0;32m[+] Creating project 04-nextjs-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./04-nextjs-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 04-nextjs-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 04-nextjs-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Install Node.js dependencies: npm install

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: NextJS Only
---
[PostgreSQL Only] /Users/gonzalo/code/spinbox/bin/spinbox create 05-postgresql-only --postgresql
[0;34m[i] Creating project: 05-postgresql-only[0m
[0;34m[i] Location: ./05-postgresql-only[0m
[0;34m[i] Components: postgresql[0m
[0;34m[i] Version Configuration:[0m
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 05-postgresql-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./05-postgresql-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 05-postgresql-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 05-postgresql-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: PostgreSQL Only
---
[MongoDB Only] /Users/gonzalo/code/spinbox/bin/spinbox create 06-mongodb-only --mongodb
[0;34m[i] Creating project: 06-mongodb-only[0m
[0;34m[i] Location: ./06-mongodb-only[0m
[0;34m[i] Components: mongodb[0m
[0;34m[i] Version Configuration:[0m
[0;32m[+] Creating project 06-mongodb-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating MongoDB database component...[0m
[0;32m[+] MongoDB database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./06-mongodb-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 06-mongodb-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 06-mongodb-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: MongoDB Only
---
[Redis Only] /Users/gonzalo/code/spinbox/bin/spinbox create 07-redis-only --redis
[0;34m[i] Creating project: 07-redis-only[0m
[0;34m[i] Location: ./07-redis-only[0m
[0;34m[i] Components: redis[0m
[0;34m[i] Version Configuration:[0m
  Redis: 7 (from config file)
[0;32m[+] Creating project 07-redis-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./07-redis-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 07-redis-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 07-redis-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Redis Only
---
[Chroma Only] /Users/gonzalo/code/spinbox/bin/spinbox create 08-chroma-only --chroma
[0;34m[i] Creating project: 08-chroma-only[0m
[0;34m[i] Location: ./08-chroma-only[0m
[0;34m[i] Components: chroma[0m
[0;34m[i] Version Configuration:[0m
[0;32m[+] Creating project 08-chroma-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./08-chroma-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 08-chroma-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 08-chroma-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Chroma Only
---
[Python + FastAPI] /Users/gonzalo/code/spinbox/bin/spinbox create 10-python-fastapi --python --fastapi
[0;34m[i] Creating project: 10-python-fastapi[0m
[0;34m[i] Location: ./10-python-fastapi[0m
[0;34m[i] Components: python fastapi[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 10-python-fastapi...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./10-python-fastapi/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 10-python-fastapi created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 10-python-fastapi
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + FastAPI
---
[Python + NextJS] /Users/gonzalo/code/spinbox/bin/spinbox create 11-python-nextjs --python --nextjs
[0;34m[i] Creating project: 11-python-nextjs[0m
[0;34m[i] Location: ./11-python-nextjs[0m
[0;34m[i] Components: python nextjs[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 11-python-nextjs...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./11-python-nextjs/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 11-python-nextjs created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 11-python-nextjs
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Install Node.js dependencies: cd nextjs && npm install

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + NextJS
---
[Node + FastAPI] /Users/gonzalo/code/spinbox/bin/spinbox create 12-node-fastapi --node --fastapi
[0;34m[i] Creating project: 12-node-fastapi[0m
[0;34m[i] Location: ./12-node-fastapi[0m
[0;34m[i] Components: node fastapi[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  Node.js: 20 (from config file)
[0;32m[+] Creating project 12-node-fastapi...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated minimal Node.js project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./12-node-fastapi/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 12-node-fastapi created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 12-node-fastapi
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Node + FastAPI
---
[Node + NextJS] /Users/gonzalo/code/spinbox/bin/spinbox create 13-node-nextjs --node --nextjs
[0;34m[i] Creating project: 13-node-nextjs[0m
[0;34m[i] Location: ./13-node-nextjs[0m
[0;34m[i] Components: node nextjs[0m
[0;34m[i] Version Configuration:[0m
  Node.js: 20 (from config file)
[0;32m[+] Creating project 13-node-nextjs...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Node.js project files[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./13-node-nextjs/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 13-node-nextjs created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 13-node-nextjs
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Install Node.js dependencies: cd nextjs && npm install

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Node + NextJS
---
[FastAPI + NextJS] /Users/gonzalo/code/spinbox/bin/spinbox create 14-fastapi-nextjs --fastapi --nextjs
[0;34m[i] Creating project: 14-fastapi-nextjs[0m
[0;34m[i] Location: ./14-fastapi-nextjs[0m
[0;34m[i] Components: fastapi nextjs[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 14-fastapi-nextjs...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./14-fastapi-nextjs/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 14-fastapi-nextjs created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 14-fastapi-nextjs
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: FastAPI + NextJS
---
[PostgreSQL + Redis] /Users/gonzalo/code/spinbox/bin/spinbox create 20-postgresql-redis --postgresql --redis
[0;34m[i] Creating project: 20-postgresql-redis[0m
[0;34m[i] Location: ./20-postgresql-redis[0m
[0;34m[i] Components: postgresql redis[0m
[0;34m[i] Version Configuration:[0m
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 20-postgresql-redis...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./20-postgresql-redis/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 20-postgresql-redis created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 20-postgresql-redis
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: PostgreSQL + Redis
---
[MongoDB + Redis] /Users/gonzalo/code/spinbox/bin/spinbox create 21-mongodb-redis --mongodb --redis
[0;34m[i] Creating project: 21-mongodb-redis[0m
[0;34m[i] Location: ./21-mongodb-redis[0m
[0;34m[i] Components: mongodb redis[0m
[0;34m[i] Version Configuration:[0m
  Redis: 7 (from config file)
[0;32m[+] Creating project 21-mongodb-redis...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating MongoDB database component...[0m
[0;32m[+] MongoDB database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./21-mongodb-redis/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 21-mongodb-redis created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 21-mongodb-redis
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: MongoDB + Redis
---
[PostgreSQL + Chroma] /Users/gonzalo/code/spinbox/bin/spinbox create 22-postgresql-chroma --postgresql --chroma
[0;34m[i] Creating project: 22-postgresql-chroma[0m
[0;34m[i] Location: ./22-postgresql-chroma[0m
[0;34m[i] Components: postgresql chroma[0m
[0;34m[i] Version Configuration:[0m
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 22-postgresql-chroma...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./22-postgresql-chroma/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 22-postgresql-chroma created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 22-postgresql-chroma
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: PostgreSQL + Chroma
---
[FastAPI + PostgreSQL + Redis] /Users/gonzalo/code/spinbox/bin/spinbox create 31-fastapi-postgresql-redis --fastapi --postgresql --redis
[0;34m[i] Creating project: 31-fastapi-postgresql-redis[0m
[0;34m[i] Location: ./31-fastapi-postgresql-redis[0m
[0;34m[i] Components: fastapi postgresql redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 31-fastapi-postgresql-redis...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./31-fastapi-postgresql-redis/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 31-fastapi-postgresql-redis created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 31-fastapi-postgresql-redis
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: FastAPI + PostgreSQL + Redis
---
[FastAPI + MongoDB + Redis] /Users/gonzalo/code/spinbox/bin/spinbox create 32-fastapi-mongodb-redis --fastapi --mongodb --redis
[0;34m[i] Creating project: 32-fastapi-mongodb-redis[0m
[0;34m[i] Location: ./32-fastapi-mongodb-redis[0m
[0;34m[i] Components: fastapi mongodb redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 32-fastapi-mongodb-redis...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating MongoDB database component...[0m
[0;32m[+] MongoDB database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./32-fastapi-mongodb-redis/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 32-fastapi-mongodb-redis created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 32-fastapi-mongodb-redis
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: FastAPI + MongoDB + Redis
---
[Python + PostgreSQL + Chroma] /Users/gonzalo/code/spinbox/bin/spinbox create 33-python-postgresql-chroma --python --postgresql --chroma
[0;34m[i] Creating project: 33-python-postgresql-chroma[0m
[0;34m[i] Location: ./33-python-postgresql-chroma[0m
[0;34m[i] Components: python postgresql chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 33-python-postgresql-chroma...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./33-python-postgresql-chroma/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 33-python-postgresql-chroma created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 33-python-postgresql-chroma
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + PostgreSQL + Chroma
---
[FastAPI + PostgreSQL + Chroma] /Users/gonzalo/code/spinbox/bin/spinbox create 34-fastapi-postgresql-chroma --fastapi --postgresql --chroma
[0;34m[i] Creating project: 34-fastapi-postgresql-chroma[0m
[0;34m[i] Location: ./34-fastapi-postgresql-chroma[0m
[0;34m[i] Components: fastapi postgresql chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 34-fastapi-postgresql-chroma...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./34-fastapi-postgresql-chroma/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 34-fastapi-postgresql-chroma created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 34-fastapi-postgresql-chroma
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: FastAPI + PostgreSQL + Chroma
---
[Full Stack + Cache] /Users/gonzalo/code/spinbox/bin/spinbox create 40-fullstack-cache --fastapi --nextjs --postgresql --redis
[0;34m[i] Creating project: 40-fullstack-cache[0m
[0;34m[i] Location: ./40-fullstack-cache[0m
[0;34m[i] Components: fastapi nextjs postgresql redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 40-fullstack-cache...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./40-fullstack-cache/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 40-fullstack-cache created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 40-fullstack-cache
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Full Stack + Cache
---
[Full Stack Mongo + Cache] /Users/gonzalo/code/spinbox/bin/spinbox create 41-fullstack-mongo-cache --fastapi --nextjs --mongodb --redis
[0;34m[i] Creating project: 41-fullstack-mongo-cache[0m
[0;34m[i] Location: ./41-fullstack-mongo-cache[0m
[0;34m[i] Components: fastapi nextjs mongodb redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 41-fullstack-mongo-cache...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating MongoDB database component...[0m
[0;32m[+] MongoDB database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./41-fullstack-mongo-cache/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 41-fullstack-mongo-cache created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 41-fullstack-mongo-cache
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Full Stack Mongo + Cache
---
[AI/ML Full Stack] /Users/gonzalo/code/spinbox/bin/spinbox create 42-ai-fullstack --fastapi --nextjs --postgresql --chroma
[0;34m[i] Creating project: 42-ai-fullstack[0m
[0;34m[i] Location: ./42-ai-fullstack[0m
[0;34m[i] Components: fastapi nextjs postgresql chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 42-ai-fullstack...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./42-ai-fullstack/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 42-ai-fullstack created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 42-ai-fullstack
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: AI/ML Full Stack
---
[Maximum Components] /Users/gonzalo/code/spinbox/bin/spinbox create 43-everything --fastapi --nextjs --postgresql --redis --chroma
[0;34m[i] Creating project: 43-everything[0m
[0;34m[i] Location: ./43-everything[0m
[0;34m[i] Components: fastapi nextjs postgresql redis chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 43-everything...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./43-everything/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 43-everything created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 43-everything
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Maximum Components
---
[Python + Dependencies] /Users/gonzalo/code/spinbox/bin/spinbox create 50-python-deps --python --with-deps
[0;34m[i] Creating project: 50-python-deps[0m
[0;34m[i] Location: ./50-python-deps[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 50-python-deps...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./50-python-deps/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 50-python-deps created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 50-python-deps
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + Dependencies
---
[Python + Docker Hub] /Users/gonzalo/code/spinbox/bin/spinbox create 51-python-dockerhub --python --docker-hub
[0;34m[i] Creating project: 51-python-dockerhub[0m
[0;34m[i] Location: ./51-python-dockerhub[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 51-python-dockerhub...[0m
[0;32m[+] Created project directory structure[0m
[0;34m[i] Using optimized Docker Hub image for python: gonzillaaa/spinbox-python-base[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./51-python-dockerhub/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 51-python-dockerhub created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 51-python-dockerhub
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + Docker Hub
---
[Python + Both Flags] /Users/gonzalo/code/spinbox/bin/spinbox create 52-python-both --python --with-deps --docker-hub
[0;34m[i] Creating project: 52-python-both[0m
[0;34m[i] Location: ./52-python-both[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
[0;32m[+] Creating project 52-python-both...[0m
[0;32m[+] Created project directory structure[0m
[0;34m[i] Using optimized Docker Hub image for python: gonzillaaa/spinbox-python-base[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./52-python-both/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 52-python-both created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 52-python-both
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + Both Flags
---
[Full Stack + Dependencies] /Users/gonzalo/code/spinbox/bin/spinbox create 53-fullstack-deps --fastapi --nextjs --postgresql --with-deps
[0;34m[i] Creating project: 53-fullstack-deps[0m
[0;34m[i] Location: ./53-fullstack-deps[0m
[0;34m[i] Components: fastapi nextjs postgresql[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 53-fullstack-deps...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;34m[i] Added Python dependencies for fastapi[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[1;33m[!] Unknown component for Python dependencies: nextjs[0m
[0;31m[-] Error occurred at line 234: command 'return 1' exited with code 1[0m
[1;33m[!] Attempting to rollback changes...[0m
[0;32m[+] Rollback completed[0m
❌ FAILED: Full Stack + Dependencies - Command failed
---
[Full Stack + Docker Hub] /Users/gonzalo/code/spinbox/bin/spinbox create 54-fullstack-dockerhub --fastapi --nextjs --postgresql --docker-hub
[0;34m[i] Creating project: 54-fullstack-dockerhub[0m
[0;34m[i] Location: ./54-fullstack-dockerhub[0m
[0;34m[i] Components: fastapi nextjs postgresql[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 54-fullstack-dockerhub...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;34m[i] Using optimized Docker Hub image for fastapi: gonzillaaa/spinbox-python-base[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;34m[i] Using optimized Docker Hub image for nextjs: gonzillaaa/spinbox-node-base[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./54-fullstack-dockerhub/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 54-fullstack-dockerhub created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 54-fullstack-dockerhub
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Full Stack + Docker Hub
---
[Full Stack + Both Flags] /Users/gonzalo/code/spinbox/bin/spinbox create 55-fullstack-both --fastapi --nextjs --postgresql --with-deps --docker-hub
[0;34m[i] Creating project: 55-fullstack-both[0m
[0;34m[i] Location: ./55-fullstack-both[0m
[0;34m[i] Components: fastapi nextjs postgresql[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 55-fullstack-both...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;34m[i] Using optimized Docker Hub image for fastapi: gonzillaaa/spinbox-python-base[0m
[0;34m[i] Added Python dependencies for fastapi[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;34m[i] Using optimized Docker Hub image for nextjs: gonzillaaa/spinbox-node-base[0m
[1;33m[!] Unknown component for Python dependencies: nextjs[0m
[0;31m[-] Error occurred at line 234: command 'return 1' exited with code 1[0m
[1;33m[!] Attempting to rollback changes...[0m
[0;32m[+] Rollback completed[0m
❌ FAILED: Full Stack + Both Flags - Command failed
---
[Profile: web-app] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-web-app --profile web-app
[0;34m[i] Applying profile: web-app[0m
[0;34m[i] Description: Full-stack web application with FastAPI, Next.js, and PostgreSQL[0m
[0;34m[i] Creating project: 60-profile-web-app[0m
[0;34m[i] Location: ./60-profile-web-app[0m
[0;34m[i] Components: python fastapi nextjs postgresql[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 60-profile-web-app...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./60-profile-web-app/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 60-profile-web-app created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 60-profile-web-app
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Profile: web-app
---
[Profile: api-only] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-api-only --profile api-only
[0;34m[i] Applying profile: api-only[0m
[0;34m[i] Description: FastAPI API with PostgreSQL and Redis caching[0m
[0;34m[i] Creating project: 60-profile-api-only[0m
[0;34m[i] Location: ./60-profile-api-only[0m
[0;34m[i] Components: python fastapi postgresql redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 60-profile-api-only...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./60-profile-api-only/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 60-profile-api-only created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 60-profile-api-only
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Profile: api-only
---
[Profile: data-science] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-data-science --profile data-science
[0;34m[i] Applying profile: data-science[0m
[0;34m[i] Description: Data science environment with pandas, numpy, matplotlib, Jupyter, scikit-learn, and plotly[0m
[0;34m[i] Creating project: 60-profile-data-science[0m
[0;34m[i] Location: ./60-profile-data-science[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
[0;32m[+] Creating project 60-profile-data-science...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./60-profile-data-science/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 60-profile-data-science created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 60-profile-data-science
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Profile: data-science
---
[Profile: ai-llm] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-ai-llm --profile ai-llm
[0;34m[i] Applying profile: ai-llm[0m
[0;34m[i] Description: AI/LLM development environment with OpenAI, Anthropic, LangChain, Transformers, and Chroma vector database[0m
[0;34m[i] Creating project: 60-profile-ai-llm[0m
[0;34m[i] Location: ./60-profile-ai-llm[0m
[0;34m[i] Components: python chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
[0;32m[+] Creating project 60-profile-ai-llm...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./60-profile-ai-llm/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 60-profile-ai-llm created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 60-profile-ai-llm
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Profile: ai-llm
---
[Profile: python] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-python --profile python
[0;34m[i] Applying profile: python[0m
[0;34m[i] Description: Python development environment with essential tools and testing[0m
[0;34m[i] Creating project: 60-profile-python[0m
[0;34m[i] Location: ./60-profile-python[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
[0;32m[+] Creating project 60-profile-python...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./60-profile-python/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 60-profile-python created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 60-profile-python
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Profile: python
---
[Profile: node] /Users/gonzalo/code/spinbox/bin/spinbox create 60-profile-node --profile node
[0;34m[i] Applying profile: node[0m
[0;34m[i] Description: Node.js development environment with TypeScript and testing tools[0m
[0;34m[i] Creating project: 60-profile-node[0m
[0;34m[i] Location: ./60-profile-node[0m
/Users/gonzalo/code/spinbox/lib/project-generator.sh: line 836: SELECTED_COMPONENTS[*]: unbound variable
✅ SUCCESS: Profile: node
---
[Web App Profile + Redis] /Users/gonzalo/code/spinbox/bin/spinbox create 61-webapp-redis --profile web-app --redis
[0;34m[i] Applying profile: web-app[0m
[0;34m[i] Description: Full-stack web application with FastAPI, Next.js, and PostgreSQL[0m
[0;34m[i] Creating project: 61-webapp-redis[0m
[0;34m[i] Location: ./61-webapp-redis[0m
[0;34m[i] Components: python fastapi nextjs postgresql[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
  PostgreSQL: 15 (from config file)
[0;32m[+] Creating project 61-webapp-redis...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./61-webapp-redis/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 61-webapp-redis created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 61-webapp-redis
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  4. Install Node.js dependencies: cd nextjs && npm install
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Web App Profile + Redis
---
[API Profile + MongoDB] /Users/gonzalo/code/spinbox/bin/spinbox create 62-api-mongodb --profile api-only --mongodb
[0;34m[i] Applying profile: api-only[0m
[0;34m[i] Description: FastAPI API with PostgreSQL and Redis caching[0m
[0;34m[i] Creating project: 62-api-mongodb[0m
[0;34m[i] Location: ./62-api-mongodb[0m
[0;34m[i] Components: python fastapi postgresql redis[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 62-api-mongodb...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating FastAPI backend component...[0m
[0;32m[+] FastAPI backend component created successfully[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./62-api-mongodb/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 62-api-mongodb created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 62-api-mongodb
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Set up Python environment: cd fastapi && ./setup_venv.sh
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: API Profile + MongoDB
---
[Data Science + Docker Hub] /Users/gonzalo/code/spinbox/bin/spinbox create 63-datascience-dockerhub --profile data-science --docker-hub
[0;34m[i] Applying profile: data-science[0m
[0;34m[i] Description: Data science environment with pandas, numpy, matplotlib, Jupyter, scikit-learn, and plotly[0m
[0;34m[i] Creating project: 63-datascience-dockerhub[0m
[0;34m[i] Location: ./63-datascience-dockerhub[0m
[0;34m[i] Components: python[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
[0;32m[+] Creating project 63-datascience-dockerhub...[0m
[0;32m[+] Created project directory structure[0m
[0;34m[i] Using optimized Docker Hub image for python: gonzillaaa/spinbox-python-base[0m
[0;32m[+] Generated minimal Python DevContainer[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./63-datascience-dockerhub/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 63-datascience-dockerhub created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 63-datascience-dockerhub
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Data Science + Docker Hub
---
[AI/LLM + Dependencies] /Users/gonzalo/code/spinbox/bin/spinbox create 64-aillm-deps --profile ai-llm --with-deps
[0;34m[i] Applying profile: ai-llm[0m
[0;34m[i] Description: AI/LLM development environment with OpenAI, Anthropic, LangChain, Transformers, and Chroma vector database[0m
[0;34m[i] Creating project: 64-aillm-deps[0m
[0;34m[i] Location: ./64-aillm-deps[0m
[0;34m[i] Components: python chroma[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.12 (from config file)
[0;32m[+] Creating project 64-aillm-deps...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;34m[i] Added Python dependencies for chroma[0m
[0;34m[i] Added Python dependencies for ai-llm[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./64-aillm-deps/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 64-aillm-deps created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 64-aillm-deps
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: AI/LLM + Dependencies
---
[All Databases] /Users/gonzalo/code/spinbox/bin/spinbox create 70-all-databases --postgresql --mongodb --redis --chroma
[0;34m[i] Creating project: 70-all-databases[0m
[0;34m[i] Location: ./70-all-databases[0m
[0;34m[i] Components: postgresql mongodb redis chroma[0m
[0;34m[i] Version Configuration:[0m
  PostgreSQL: 15 (from config file)
  Redis: 7 (from config file)
[0;32m[+] Creating project 70-all-databases...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated Docker Compose configuration[0m
[0;32m[+] Creating PostgreSQL database component...[0m
[0;32m[+] PostgreSQL database component created successfully[0m
[0;32m[+] Creating MongoDB database component...[0m
[0;32m[+] MongoDB database component created successfully[0m
[0;32m[+] Creating Redis caching component...[0m
[0;32m[+] Redis caching component created successfully[0m
[0;32m[+] Creating Chroma vector database component...[0m
[0;32m[+] Chroma vector database component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./70-all-databases/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 70-all-databases created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 70-all-databases
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  5. Start services: docker-compose up -d

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: All Databases
---
[Python + Node Together] /Users/gonzalo/code/spinbox/bin/spinbox create 71-python-node --python --node
[0;34m[i] Creating project: 71-python-node[0m
[0;34m[i] Location: ./71-python-node[0m
[0;34m[i] Components: python node[0m
[0;34m[i] Version Configuration:[0m
  Python: 3.11 (from config file)
  Node.js: 20 (from config file)
[0;32m[+] Creating project 71-python-node...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Python project files[0m
[0;32m[+] Generated minimal Node.js project files[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./71-python-node/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 71-python-node created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 71-python-node
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Python + Node Together
---
[Redundant Base + App] /Users/gonzalo/code/spinbox/bin/spinbox create 72-node-nextjs-explicit --node --nextjs
[0;34m[i] Creating project: 72-node-nextjs-explicit[0m
[0;34m[i] Location: ./72-node-nextjs-explicit[0m
[0;34m[i] Components: node nextjs[0m
[0;34m[i] Version Configuration:[0m
  Node.js: 20 (from config file)
[0;32m[+] Creating project 72-node-nextjs-explicit...[0m
[0;32m[+] Created project directory structure[0m
[0;32m[+] Generated DevContainer configuration[0m
[0;32m[+] Generated minimal Node.js project files[0m
[0;32m[+] Creating Next.js frontend component...[0m
[0;32m[+] Next.js frontend component created successfully[0m
[0;32m[+] Generated component files[0m
[0;32m[+] Saved project configuration to ./72-node-nextjs-explicit/.config/project.conf[0m
[0;32m[+] Saved project configuration[0m
[0;32m[+] Project 72-node-nextjs-explicit created successfully![0m
[0;34m[i] Next steps:[0m
  1. cd 72-node-nextjs-explicit
  2. Open in your preferred editor (code . or cursor .)
  3. Reopen in DevContainer when prompted
  4. Install Node.js dependencies: cd nextjs && npm install

[0;34m[i] Security reminders:[0m
  • Review and update .env files with your actual credentials
  • Never commit .env files to version control
  • Use strong passwords and secure API keys
✅ SUCCESS: Redundant Base + App
---
