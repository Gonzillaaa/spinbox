#!/bin/bash
# Virtual environment setup script for Python projects
# Generated by Spinbox - ensures Python 3.10+ and proper virtual environment setup

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# For environments that don't support colors, use plain text
if [ ! -t 1 ]; then
    print_status() { echo "[INFO] $1"; }
    print_warning() { echo "[WARNING] $1"; }
    print_error() { echo "[ERROR] $1"; }
fi

# Check if Python 3.10+ is available
check_python_version() {
    local python_cmd=""
    
    # Try different Python commands
    for cmd in python3.12 python3.11 python3.10 python3 python; do
        if command -v "$cmd" >/dev/null 2>&1; then
            local version=$($cmd --version 2>&1 | grep -oE '[0-9]+\.[0-9]+' | head -1)
            local major=$(echo $version | cut -d. -f1)
            local minor=$(echo $version | cut -d. -f2)
            
            if [ "$major" -eq 3 ] && [ "$minor" -ge 10 ]; then
                python_cmd="$cmd"
                print_status "Found Python $version at $(which $cmd)"
                break
            fi
        fi
    done
    
    if [ -z "$python_cmd" ]; then
        print_error "Python 3.10+ not found. Please install Python 3.10 or later."
        exit 1
    fi
    
    echo "$python_cmd"
}

# Create virtual environment
create_virtual_environment() {
    local python_cmd="$1"
    
    if [ -d "venv" ]; then
        print_warning "Virtual environment 'venv' already exists"
        read -p "Do you want to recreate it? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Removing existing virtual environment..."
            rm -rf venv
        else
            print_status "Using existing virtual environment"
            return 0
        fi
    fi
    
    print_status "Creating virtual environment with $python_cmd..."
    $python_cmd -m venv venv
    
    if [ ! -d "venv" ]; then
        print_error "Failed to create virtual environment"
        exit 1
    fi
    
    print_status "Virtual environment created successfully"
}

# Activate virtual environment and install uv
setup_uv() {
    print_status "Activating virtual environment..."
    source venv/bin/activate
    
    print_status "Installing uv for fast package management..."
    pip install --upgrade pip
    pip install uv
    
    print_status "uv installed successfully"
}

# Install requirements if they exist
install_requirements() {
    if [ -f "requirements.txt" ]; then
        print_status "Installing requirements from requirements.txt..."
        source venv/bin/activate
        uv pip install -r requirements.txt
        print_status "Requirements installed successfully"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
}

# Create activation script
create_activation_script() {
    cat > activate_venv.sh << 'EOF'
#!/bin/bash
# Activate virtual environment and show status
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
    echo "✓ Virtual environment activated"
    echo "Python: $(python --version)"
    echo "Location: $(which python)"
    echo ""
    echo "To deactivate, run: deactivate"
else
    echo "❌ Virtual environment not found. Run ./setup_venv.sh first."
    exit 1
fi
EOF
    
    chmod +x activate_venv.sh
    print_status "Created activation script: activate_venv.sh"
}

# Main setup function
main() {
    print_status "Setting up Python virtual environment..."
    
    # Check Python version
    python_cmd=$(check_python_version)
    
    # Create virtual environment
    create_virtual_environment "$python_cmd"
    
    # Setup uv
    setup_uv
    
    # Install requirements
    install_requirements
    
    # Create activation script
    create_activation_script
    
    print_status "Virtual environment setup complete!"
    echo ""
    echo "Next steps:"
    echo "  1. Activate: source venv/bin/activate (or ./activate_venv.sh)"
    echo "  2. Install deps: uv pip install -r requirements.txt"
    echo "  3. Run your application"
    echo ""
    echo "To activate in future sessions: source venv/bin/activate"
}

# Run main function
main "$@"