#!/bin/bash
# n8n component generator for Spinbox
# Creates n8n workflow automation platform with optional PostgreSQL integration

# Source required libraries
source "$(dirname "${BASH_SOURCE[0]}")/../lib/utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/config.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/version-config.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/dependency-manager.sh"

# Generate n8n workflow automation component
function generate_n8n_component() {
    local project_dir="$1"
    local n8n_dir="$project_dir/n8n"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_info "DRY RUN: Would generate n8n workflow automation component"
        return 0
    fi
    
    print_status "Creating n8n workflow automation component..."
    
    # Ensure n8n directory exists
    safe_create_dir "$n8n_dir"
    
    # Generate n8n environment file
    generate_n8n_env_file "$n8n_dir"
    
    # Update docker-compose.yml with n8n service
    update_docker_compose_for_n8n "$project_dir"
    
    # Update DevContainer configuration for n8n
    update_devcontainer_for_n8n "$project_dir"
    
    # Manage dependencies if --with-deps flag is enabled
    manage_component_dependencies "$project_dir" "n8n"
    
    print_status "n8n workflow automation component created successfully"
}

# Generate n8n environment configuration
function generate_n8n_env_file() {
    local n8n_dir="$1"
    
    cat > "$n8n_dir/.env.example" << 'EOF'
# n8n Configuration
# Generated by Spinbox

# Basic Authentication
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=changeme

# Timezone Configuration
GENERIC_TIMEZONE=America/New_York
TZ=America/New_York

# Encryption Key (change this for production!)
N8N_ENCRYPTION_KEY=your-encryption-key-here

# External Webhook URL (update for production)
WEBHOOK_URL=http://localhost:5678/
EOF
    
    print_debug "Created n8n environment configuration"
}

# Update docker-compose.yml with n8n service
function update_docker_compose_for_n8n() {
    local project_dir="$1"
    local compose_file="$project_dir/docker-compose.yml"
    
    # Check if PostgreSQL is being used
    local postgres_env=""
    if grep -q "postgres:" "$compose_file" 2>/dev/null || [[ "$USE_POSTGRESQL" == true ]]; then
        postgres_env="      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=\${PROJECT_NAME:-app}
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres"
    fi
    
    # Official n8n Docker image from Docker Hub (n8nio/n8n)
    local n8n_service="
  n8n:
    image: n8nio/n8n:\${N8N_VERSION:-latest}
    container_name: \${PROJECT_NAME:-app}-n8n
    restart: unless-stopped
    ports:
      - \"5678:5678\"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=\${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=\${N8N_PASSWORD:-changeme}
      - GENERIC_TIMEZONE=\${TIMEZONE:-America/New_York}
      - TZ=\${TIMEZONE:-America/New_York}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY:-your-encryption-key-here}
      - WEBHOOK_URL=\${WEBHOOK_URL:-http://localhost:5678/}$postgres_env
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network"
    
    # Simple file update approach
    if [[ -f "$compose_file" ]]; then
        if grep -q "^volumes:" "$compose_file"; then
            # Insert before volumes section
            local temp_file="${compose_file}.tmp"
            while IFS= read -r line; do
                if [[ "$line" =~ ^volumes: ]]; then
                    printf '%s\n\n%s\n' "$n8n_service" "$line" >> "$temp_file"
                    echo "  n8n_data:" >> "$temp_file"
                else
                    echo "$line" >> "$temp_file"
                fi
            done < "$compose_file"
            mv "$temp_file" "$compose_file"
        else
            # Append service and create volumes section
            echo "$n8n_service" >> "$compose_file"
            echo "" >> "$compose_file"
            echo "volumes:" >> "$compose_file"
            echo "  n8n_data:" >> "$compose_file"
        fi
    else
        # Create new docker-compose.yml
        cat > "$compose_file" << EOF
version: '3.8'

services:$n8n_service

volumes:
  n8n_data:

networks:
  app-network:
    driver: bridge
EOF
    fi
    
    print_debug "Updated docker-compose.yml with official n8n service"
}

# Update DevContainer configuration for n8n
function update_devcontainer_for_n8n() {
    local project_dir="$1"
    local devcontainer_file="$project_dir/.devcontainer/devcontainer.json"
    
    if [[ -f "$devcontainer_file" ]]; then
        # Add n8n port forwarding (5678)
        if grep -q "forwardPorts" "$devcontainer_file"; then
            if ! grep -q "5678" "$devcontainer_file"; then
                sed -i.bak 's/"forwardPorts": \[/"forwardPorts": [5678, /' "$devcontainer_file"
            fi
        else
            # Add forwardPorts before the last closing brace
            sed -i.bak 's/}$/,\n  "forwardPorts": [5678]\n}/' "$devcontainer_file"
        fi
        
        # Clean up backup file
        rm -f "$devcontainer_file.bak"
        
        print_debug "Updated DevContainer configuration for n8n port 5678"
    fi
}

# Export the main function
export -f generate_n8n_component