#!/bin/bash
# MongoDB component generator for Spinbox
# Creates MongoDB database with initialization scripts and Docker setup

# Source required libraries
source "$(dirname "${BASH_SOURCE[0]}")/../lib/utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/config.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/version-config.sh"

# Generate MongoDB database component
function generate_mongodb_component() {
    local project_dir="$1"
    local mongodb_dir="$project_dir/mongodb"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_info "DRY RUN: Would generate MongoDB database component"
        return 0
    fi
    
    print_status "Creating MongoDB database component..."
    
    # Ensure database directory exists
    safe_create_dir "$mongodb_dir"
    safe_create_dir "$mongodb_dir/init"
    safe_create_dir "$mongodb_dir/scripts"
    safe_create_dir "$mongodb_dir/data"
    
    # Generate database files
    generate_mongodb_init_scripts "$mongodb_dir"
    generate_mongodb_config "$mongodb_dir"
    generate_mongodb_scripts "$mongodb_dir"
    generate_mongodb_env_files "$mongodb_dir"
    
    # Generate working examples if requested
    if [[ "${WITH_EXAMPLES:-false}" == "true" ]]; then
        generate_mongodb_working_examples "$mongodb_dir"
    fi
    
    print_status "MongoDB database component created successfully"
}

# Generate database initialization scripts
function generate_mongodb_init_scripts() {
    local mongodb_dir="$1"
    local init_dir="$mongodb_dir/init"
    
    # Main initialization script
    cat > "$init_dir/01-init.js" << EOF
// MongoDB initialization for ${PROJECT_NAME:-app}
// Generated by Spinbox on $(date)

// Switch to application database
db = db.getSiblingDB('${PROJECT_NAME:-app}');

// Create application user
db.createUser({
  user: '${PROJECT_NAME:-app}_user',
  pwd: 'development_password',
  roles: [
    {
      role: 'dbOwner',
      db: '${PROJECT_NAME:-app}'
    }
  ]
});

// Create sample collections with indexes
db.createCollection('users');
db.createCollection('documents');

// Create useful indexes
db.users.createIndex({ "email": 1 }, { unique: true });
db.users.createIndex({ "created_at": 1 });
db.documents.createIndex({ "title": "text", "content": "text" });
db.documents.createIndex({ "created_at": 1 });
db.documents.createIndex({ "user_id": 1 });

print('MongoDB initialization completed for ${PROJECT_NAME:-app}');
EOF

    # Sample data script
    cat > "$init_dir/02-sample-data.js" << EOF
// Sample data for development
// Generated by Spinbox on $(date)

db = db.getSiblingDB('${PROJECT_NAME:-app}');

// Insert sample users
db.users.insertMany([
  {
    _id: ObjectId(),
    email: "user1@example.com",
    name: "Sample User 1",
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    _id: ObjectId(),
    email: "user2@example.com", 
    name: "Sample User 2",
    created_at: new Date(),
    updated_at: new Date()
  }
]);

// Insert sample documents
const users = db.users.find().toArray();
if (users.length > 0) {
  db.documents.insertMany([
    {
      _id: ObjectId(),
      title: "Welcome Document",
      content: "This is a sample document in your MongoDB database.",
      user_id: users[0]._id,
      created_at: new Date(),
      updated_at: new Date()
    },
    {
      _id: ObjectId(),
      title: "Getting Started",
      content: "MongoDB is ready for your application development.",
      user_id: users[0]._id,
      created_at: new Date(),
      updated_at: new Date()
    }
  ]);
}

print('Sample data inserted successfully');
EOF
}

# Generate MongoDB configuration
function generate_mongodb_config() {
    local mongodb_dir="$1"
    
    # MongoDB configuration file
    cat > "$mongodb_dir/mongod.conf" << EOF
# MongoDB configuration for ${PROJECT_NAME:-app}
# Generated by Spinbox on $(date)

# Storage
storage:
  dbPath: /data/db
  journal:
    enabled: true

# Network
net:
  port: 27017
  bindIp: 0.0.0.0

# Security
security:
  authorization: enabled

# Operations
operationProfiling:
  slowOpThresholdMs: 100

# Logging
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
  logRotate: rename

# Process management
processManagement:
  timeZoneInfo: /usr/share/zoneinfo
EOF

    # Docker Compose service definition
    cat > "$mongodb_dir/docker-compose.yml" << EOF
# MongoDB service for ${PROJECT_NAME:-app}
# Generated by Spinbox on $(date)

version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: ${PROJECT_NAME:-app}_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: ${PROJECT_NAME:-app}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init:/docker-entrypoint-initdb.d:ro
      - ./mongod.conf:/etc/mongod.conf:ro
    command: ["mongod", "--config", "/etc/mongod.conf"]
    networks:
      - app_network

volumes:
  mongodb_data:
    driver: local

networks:
  app_network:
    driver: bridge
EOF
}

# Generate utility scripts
function generate_mongodb_scripts() {
    local mongodb_dir="$1"
    local scripts_dir="$mongodb_dir/scripts"
    
    # Database backup script
    cat > "$scripts_dir/backup.sh" << 'EOF'
#!/bin/bash
# MongoDB backup script

DB_NAME=${1:-app}
BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"

echo "Creating backup directory: $BACKUP_DIR"
mkdir -p "$BACKUP_DIR"

echo "Backing up database: $DB_NAME"
docker exec ${PROJECT_NAME:-app}_mongodb mongodump --db "$DB_NAME" --out "/tmp/backup"
docker cp ${PROJECT_NAME:-app}_mongodb:/tmp/backup "$BACKUP_DIR/"

echo "Backup completed: $BACKUP_DIR"
EOF

    # Database restore script
    cat > "$scripts_dir/restore.sh" << 'EOF'
#!/bin/bash
# MongoDB restore script

BACKUP_PATH="$1"
DB_NAME=${2:-app}

if [[ -z "$BACKUP_PATH" ]]; then
    echo "Usage: $0 <backup_path> [database_name]"
    exit 1
fi

echo "Restoring database: $DB_NAME from $BACKUP_PATH"
docker cp "$BACKUP_PATH" ${PROJECT_NAME:-app}_mongodb:/tmp/restore/
docker exec ${PROJECT_NAME:-app}_mongodb mongorestore --db "$DB_NAME" "/tmp/restore/$DB_NAME"

echo "Restore completed"
EOF

    # Database shell access script
    cat > "$scripts_dir/shell.sh" << 'EOF'
#!/bin/bash
# MongoDB shell access script

DB_NAME=${1:-app}

echo "Connecting to MongoDB database: $DB_NAME"
docker exec -it ${PROJECT_NAME:-app}_mongodb mongosh "$DB_NAME" --username admin --password admin_password --authenticationDatabase admin
EOF

    # Make scripts executable
    chmod +x "$scripts_dir"/*.sh
}

# Generate environment files
function generate_mongodb_env_files() {
    local mongodb_dir="$1"
    
    # Environment variables for application
    cat > "$mongodb_dir/.env.mongodb" << EOF
# MongoDB environment variables
# Generated by Spinbox on $(date)

# Database connection
MONGODB_URL=mongodb://admin:admin_password@localhost:27017/${PROJECT_NAME:-app}?authSource=admin
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_DATABASE=${PROJECT_NAME:-app}
MONGODB_USERNAME=${PROJECT_NAME:-app}_user
MONGODB_PASSWORD=development_password

# Admin credentials (for initialization only)
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=admin_password
MONGO_INITDB_DATABASE=${PROJECT_NAME:-app}

# Connection options
MONGODB_MAX_POOL_SIZE=10
MONGODB_MIN_POOL_SIZE=1
MONGODB_MAX_IDLE_TIME_MS=30000
MONGODB_SERVER_SELECTION_TIMEOUT_MS=5000
EOF

    # FastAPI integration example
    cat > "$mongodb_dir/fastapi_integration.py" << EOF
# MongoDB integration for FastAPI
# Generated by Spinbox on $(date)

from motor.motor_asyncio import AsyncIOMotorClient
from pymongo import MongoClient
import os
from typing import Optional

# Connection configuration
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://admin:admin_password@localhost:27017/${PROJECT_NAME:-app}?authSource=admin")
DATABASE_NAME = os.getenv("MONGODB_DATABASE", "${PROJECT_NAME:-app}")

class MongoDB:
    client: Optional[AsyncIOMotorClient] = None
    database = None

# MongoDB connection instance
mongodb = MongoDB()

async def connect_to_mongo():
    """Create database connection"""
    mongodb.client = AsyncIOMotorClient(MONGODB_URL)
    mongodb.database = mongodb.client[DATABASE_NAME]
    print(f"Connected to MongoDB: {DATABASE_NAME}")

async def close_mongo_connection():
    """Close database connection"""
    if mongodb.client:
        mongodb.client.close()
        print("Disconnected from MongoDB")

def get_database():
    """Get database instance"""
    return mongodb.database

# Example usage in FastAPI:
#
# from fastapi import FastAPI
# from .mongodb_config import connect_to_mongo, close_mongo_connection
#
# app = FastAPI()
#
# @app.on_event("startup")
# async def startup_db_client():
#     await connect_to_mongo()
#
# @app.on_event("shutdown")
# async def shutdown_db_client():
#     await close_mongo_connection()
EOF

    # Requirements for MongoDB integration
    cat > "$mongodb_dir/requirements.txt" << EOF
# MongoDB dependencies for Python
# Generated by Spinbox on $(date)

motor>=3.3.0              # Async MongoDB driver for FastAPI
pymongo>=4.5.0            # Sync MongoDB driver
pydantic>=2.0.0           # For data validation
dnspython>=2.3.0          # Required for MongoDB+srv:// URIs
EOF
}

# Main execution function
function main() {
    local project_dir="${1:-.}"
    
    # Validate project directory
    if [[ ! -d "$project_dir" ]]; then
        print_error "Project directory does not exist: $project_dir"
        return 1
    fi
    
    # Generate MongoDB component
    generate_mongodb_component "$project_dir"
    
    return 0
}

# Generate working examples for MongoDB
function generate_mongodb_working_examples() {
    local mongodb_dir="$1"
    local examples_source="$PROJECT_ROOT/templates/examples/core-components/mongodb"
    
    print_info "Adding MongoDB working examples..."
    
    # Copy core MongoDB examples
    if [[ -d "$examples_source" ]]; then
        # Copy example files
        for example_file in "$examples_source"/example-*.py "$examples_source"/example-*.js; do
            if [[ -f "$example_file" ]]; then
                cp "$example_file" "$mongodb_dir/scripts/"
                print_debug "Copied $(basename "$example_file")"
            fi
        done
        
        # Copy examples README
        if [[ -f "$examples_source/README.md" ]]; then
            cp "$examples_source/README.md" "$mongodb_dir/EXAMPLES.md"
            print_debug "Copied examples documentation"
        fi
        
        print_info "MongoDB working examples added successfully"
        print_info "Examples available:"
        echo "  • example-models.py - Beanie/Motor model definitions"
        echo "  • example-operations.py - Document CRUD operations"
        echo "  • example-aggregations.py - Aggregation pipeline examples"
        echo "  • EXAMPLES.md - Setup and usage instructions"
    else
        print_warning "MongoDB examples directory not found: $examples_source"
    fi
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi