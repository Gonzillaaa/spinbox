# Redis cache decorator for FastAPI
# Generated by Spinbox on Tue Jul 15 00:12:51 CEST 2025

import functools
import json
import hashlib
from typing import Any, Callable, Optional
from .fastapi_integration import redis_client

def cache(ttl: int = 3600, key_prefix: str = "cache"):
    """
    Cache decorator for FastAPI endpoints
    
    Args:
        ttl: Time to live in seconds
        key_prefix: Prefix for cache keys
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs) -> Any:
            # Generate cache key from function name and arguments
            key_data = f"{func.__name__}:{str(args)}:{str(sorted(kwargs.items()))}"
            cache_key = f"{key_prefix}:{hashlib.md5(key_data.encode()).hexdigest()}"
            
            # Try to get from cache
            cached_result = await redis_client.get_json(cache_key)
            if cached_result is not None:
                return cached_result
            
            # Execute function and cache result
            result = await func(*args, **kwargs)
            await redis_client.set_json(cache_key, result, ttl)
            
            return result
        return wrapper
    return decorator

# Example usage:
# @cache(ttl=300, key_prefix="api_data")
# async def get_expensive_data(param: str):
#     # Expensive operation here
#     return {"data": f"result for {param}"}
